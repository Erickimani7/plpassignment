// Standard function with optional tax parameter
double calculateTotal(List<double> prices, {double taxRate = 0.0}) {
  double subtotal = prices.reduce((a, b) => a + b);
  double tax = subtotal * taxRate;
  return subtotal + tax;
}

// Higher-order function: applies a discount function to each price
List<double> applyDiscount(List<double> prices, double Function(double) discountFunction) {
  return prices.map((price) => discountFunction(price)).toList();
}

// Recursive function to calculate factorial-based discount percentage
int calculateFactorialDiscount(int n) {
  if (n <= 1) return 1;
  return n * calculateFactorialDiscount(n - 1);
}

void main() {
  // Initial list of item prices
  List<double> cart = [5.0, 12.0, 7.5, 20.0, 15.0];

  // Anonymous function to filter out items below $10
  List<double> filteredCart = cart.where((price) => price >= 10.0).toList();
  print('Filtered Cart (Items >= \$10): $filteredCart');

  // Discount function: reduce price by 10%
  double discountRate = 0.10;
  List<double> discountedCart = applyDiscount(filteredCart, (price) => price * (1 - discountRate));
  print('Discounted Cart (10% off): $discountedCart');

  // Calculate total with 5% tax
  double totalWithTax = calculateTotal(discountedCart, taxRate: 0.05);
  print('Total with Tax: \$${totalWithTax.toStringAsFixed(2)}');

  // Apply factorial discount based on number of items
  int itemCount = discountedCart.length;
  int factorialDiscountPercent = calculateFactorialDiscount(itemCount);
  double specialDiscount = totalWithTax * (factorialDiscountPercent / 100);
  double finalTotal = totalWithTax - specialDiscount;

  print('Factorial Discount (${itemCount}! = $factorialDiscountPercent%): -\$${specialDiscount.toStringAsFixed(2)}');
  print('Final Total after Special Discount: \$${finalTotal.toStringAsFixed(2)}');
}
